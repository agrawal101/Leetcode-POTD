Problem link - https://leetcode.com/problems/find-minimum-time-to-reach-last-room-ii/description/?envType=daily-question&envId=2025-05-08

class Solution {
    public int minTimeToReach(int[][] moveTime) {
        int n = moveTime.length;
        int m = moveTime[0].length;
        int dis[][] = new int[n][m];
        for(int ar[]:dis)
        {
            Arrays.fill(ar,Integer.MAX_VALUE);
        }
        dis[0][0] = 0;
        PriorityQueue<int []> pq = new PriorityQueue<>((a,b)-> Integer.compare(a[0],b[0]));
        pq.add(new int[]{0,0,0});
        int row[] = {-1,0,1,0};
        int col[] = {0,-1,0,1};
        while(!pq.isEmpty())
        {
            int temp[] = pq.poll();
            int t = temp[0];
            int i = temp[1];
            int j = temp[2];
            if(i==n-1 && j==m-1)
            return t;
            for(int k = 0;k<4;k++)
            {
                int ni = row[k]+i;
                int nj = col[k]+j;
                if(ni>=0 && nj>=0 && ni<n && nj<m)
                {
                    int x = (ni+nj)%2==0?2:1;
                    int wait = Math.max(moveTime[ni][nj]-t,0);
                    int nt = wait+t+x;
                    if(dis[ni][nj]>nt)
                    {
                        dis[ni][nj] = nt;
                        pq.add(new int[]{dis[ni][nj],ni,nj});
                    }
                }
            }
        }
        return -1;
    }
}
