Problem link - https://leetcode.com/problems/largest-color-value-in-a-directed-graph/description/?envType=daily-question&envId=2025-05-26

Toplogical sort + 2d array of color and edges

class Solution {
    public int largestPathValue(String colors, int[][] edges) {
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        int ind[] = new int[colors.length()];
        int v = colors.length();
        int t[][] = new int[v][26];
        for(int ar[]:t)
        Arrays.fill(ar,0);
        for(int i = 0;i<v;i++)
        {
            adj.add(new ArrayList<Integer>());
        }
        for(int ar[]:edges)
        {
            adj.get(ar[0]).add(ar[1]);
            ind[ar[1]]++;
        }
        Queue<Integer> q = new LinkedList<>();
        for(int i = 0;i<v;i++)
        {
            if(ind[i]==0){
                q.add(i);
                t[i][colors.charAt(i)-'a'] = 1;
            }
        }
        int cnt = 0;
        int ans = 0;
        while(!q.isEmpty())
        {
            int node = q.poll();
            cnt++;
            ans = Math.max(ans,t[node][colors.charAt(node)-'a']);
            for(int x:adj.get(node))
            {
                for(int i = 0;i<26;i++)
                {
                    int d = 0;
                    if(colors.charAt(x)-'a' == i)
                        d = 1;
                    t[x][i] = Math.max(t[x][i],t[node][i]+d);
                }
                ind[x]--;
                if(ind[x]==0)
                {
                    q.add(x);
                }
            }
        }
        if(cnt!=v)
        return -1;
        return ans;
    }
}
